/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[42,43,51,52,54,71,72,98,99,105,112,113,114,115,116],$V2=[1,9],$V3=[1,10],$V4=[1,23],$V5=[1,24],$V6=[1,15],$V7=[1,17],$V8=[1,18],$V9=[1,29],$Va=[1,28],$Vb=[1,33],$Vc=[1,26],$Vd=[1,27],$Ve=[1,30],$Vf=[1,31],$Vg=[1,32],$Vh=[5,18,20,22,23,27,28,29,30,55],$Vi=[5,16,18,20,22,23,27,28,29,30,32,55],$Vj=[2,47],$Vk=[1,39],$Vl=[1,40],$Vm=[1,38],$Vn=[5,16,18,20,22,23,27,28,29,30,32,36,37,38,48,51,55,56,58,60,61,62,63,64,66,108,109,110,111],$Vo=[1,41],$Vp=[5,16,18,20,22,23,27,28,29,30,32,36,37,38,48,51,55,56,58,60,61,62,63,64,66,68,108,109,110,111],$Vq=[1,45],$Vr=[1,65],$Vs=[1,67],$Vt=[5,16,18,20,22,23,27,28,29,30,32,36,37,38,48,51,55,56,58,60,61,62,63,64,66,68,72,74,75,76,77,78,79,80,88,89,93,94,96,108,109,110,111],$Vu=[1,68],$Vv=[1,69],$Vw=[5,16,18,20,22,23,27,28,29,30,32,36,37,38,48,51,55,56,58,60,61,62,63,64,66,68,72,74,75,76,77,78,79,80,88,89,93,94,96,98,99,108,109,110,111],$Vx=[1,71],$Vy=[1,70],$Vz=[1,72],$VA=[5,16,18,20,22,23,27,28,29,30,32,36,37,38,42,48,51,55,56,58,60,61,62,63,64,66,68,72,74,75,76,77,78,79,80,88,89,93,94,96,98,99,101,102,108,109,110,111],$VB=[5,20,22,23,27,28,29,30,55],$VC=[1,86],$VD=[1,87],$VE=[5,16,18,20,22,23,27,28,29,30,32,48,49,55,58,60,61,62,63,64],$VF=[31,51,52,54,86,87,98,99,105,112,113,114,115,116],$VG=[1,119],$VH=[1,120],$VI=[2,100],$VJ=[5,22,23,27,28,29,30,55],$VK=[5,18,20,22,23,27,28,29,30,32,55],$VL=[2,51],$VM=[1,131],$VN=[1,132],$VO=[1,133],$VP=[1,134],$VQ=[1,135],$VR=[1,136],$VS=[5,18,20,22,23,27,28,29,30,32,48,55,58,60,61,62,63,64],$VT=[5,18,20,22,23,27,28,29,30,32,48,49,55,58,60,61,62,63,64],$VU=[5,18,20,22,23,27,28,29,30,32,48,49,51,55,56,58,60,61,62,63,64],$VV=[32,55],$VW=[5,23,27,28,29,30,55],$VX=[1,168],$VY=[5,22,23,27,28,29,30,32,55],$VZ=[5,27,28,29,30,55],$V_=[108,109,111],$V$=[5,55],$V01=[6,31],$V11=[5,27,28,29,30,32,55],$V21=[5,27,28,29,30,32,38,55];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"selectClause":4,"EOF":5,"SELECT":6,"optDistinct":7,"selectExprList":8,"optFromClause":9,"optWhereClause":10,"optGroupByClause":11,"optHavingClause":12,"optOrderByClause":13,"optSetOp":14,"DISTINCT":15,"FROM":16,"tableExprList":17,"WHERE":18,"expression":19,"GROUP_BY":20,"commaSepExpressionList":21,"HAVING":22,"ORDER_BY":23,"orderByList":24,"setOp":25,"optAll":26,"UNION":27,"INTERSECT":28,"SETMINUS":29,"EXCEPT":30,"ALL":31,"COMMA":32,"orderByListItem":33,"optOrderByOrder":34,"optOrderByNulls":35,"ASC":36,"DESC":37,"NULLS":38,"FIRST":39,"LAST":40,"selectExpr":41,"STAR":42,"QUALIFIED_STAR":43,"optTableExprAlias":44,"tableExpr":45,"joinComponent":46,"optJoinModifier":47,"JOIN":48,"ON":49,"tableExprPart":50,"IDENTIFIER":51,"QUALIFIED_IDENTIFIER":52,"subselect":53,"LPAREN":54,"RPAREN":55,"AS":56,"ALIAS":57,"LEFT":58,"OUTER":59,"RIGHT":60,"FULL":61,"INNER":62,"CROSS":63,"NATURAL":64,"andCondition":65,"LOGICAL_OR":66,"condition":67,"LOGICAL_AND":68,"operand":69,"conditionRightHandSide":70,"EXISTS":71,"LOGICAL_NOT":72,"compare":73,"CMP_EQUALS":74,"CMP_NOTEQUALS":75,"CMP_NOTEQUALS_BASIC":76,"CMP_GREATER":77,"CMP_GREATEROREQUAL":78,"CMP_LESS":79,"CMP_LESSOREQUAL":80,"rhsCompareTest":81,"rhsIsTest":82,"rhsInTest":83,"rhsLikeTest":84,"rhsBetweenTest":85,"ANY":86,"SOME":87,"IS":88,"IN":89,"functionParam":90,"functionExpressionList":91,"optFunctionExpressionList":92,"LIKE":93,"BETWEEN":94,"summand":95,"CONCAT":96,"factor":97,"PLUS":98,"MINUS":99,"term":100,"DIVIDE":101,"MODULO":102,"value":103,"caseWhen":104,"CASE":105,"caseWhenList":106,"optCaseWhenElse":107,"END":108,"WHEN":109,"THEN":110,"ELSE":111,"STRING":112,"NUMERIC":113,"PARAMETER":114,"BOOLEAN":115,"NULL":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SELECT",15:"DISTINCT",16:"FROM",18:"WHERE",20:"GROUP_BY",22:"HAVING",23:"ORDER_BY",27:"UNION",28:"INTERSECT",29:"SETMINUS",30:"EXCEPT",31:"ALL",32:"COMMA",36:"ASC",37:"DESC",38:"NULLS",39:"FIRST",40:"LAST",42:"STAR",43:"QUALIFIED_STAR",48:"JOIN",49:"ON",51:"IDENTIFIER",52:"QUALIFIED_IDENTIFIER",54:"LPAREN",55:"RPAREN",56:"AS",57:"ALIAS",58:"LEFT",59:"OUTER",60:"RIGHT",61:"FULL",62:"INNER",63:"CROSS",64:"NATURAL",66:"LOGICAL_OR",68:"LOGICAL_AND",71:"EXISTS",72:"LOGICAL_NOT",74:"CMP_EQUALS",75:"CMP_NOTEQUALS",76:"CMP_NOTEQUALS_BASIC",77:"CMP_GREATER",78:"CMP_GREATEROREQUAL",79:"CMP_LESS",80:"CMP_LESSOREQUAL",86:"ANY",87:"SOME",88:"IS",89:"IN",93:"LIKE",94:"BETWEEN",96:"CONCAT",98:"PLUS",99:"MINUS",101:"DIVIDE",102:"MODULO",105:"CASE",108:"END",109:"WHEN",110:"THEN",111:"ELSE",112:"STRING",113:"NUMERIC",114:"PARAMETER",115:"BOOLEAN",116:"NULL"},
productions_: [0,[3,2],[4,9],[7,0],[7,1],[9,0],[9,2],[10,0],[10,2],[11,0],[11,2],[12,0],[12,2],[13,0],[13,2],[14,0],[14,3],[25,1],[25,1],[25,1],[25,1],[26,0],[26,1],[24,3],[24,1],[33,3],[34,0],[34,1],[34,1],[35,0],[35,2],[35,2],[8,1],[8,3],[41,1],[41,1],[41,2],[17,1],[17,3],[45,1],[45,4],[45,6],[46,2],[50,1],[50,1],[50,1],[53,3],[44,0],[44,1],[44,2],[44,2],[47,0],[47,1],[47,2],[47,1],[47,2],[47,1],[47,1],[47,1],[47,1],[19,1],[19,3],[19,1],[65,1],[65,3],[67,1],[67,2],[67,2],[67,2],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[73,1],[70,1],[70,1],[70,1],[70,1],[70,1],[81,2],[81,3],[81,3],[81,3],[82,2],[82,3],[82,4],[82,5],[83,2],[83,3],[83,4],[83,5],[21,3],[21,1],[90,1],[90,1],[90,1],[91,3],[91,1],[92,0],[92,1],[84,2],[84,3],[85,4],[85,5],[69,1],[69,3],[95,1],[95,3],[95,3],[97,1],[97,3],[97,3],[97,3],[100,1],[100,1],[100,1],[100,1],[100,3],[100,4],[100,4],[104,4],[106,5],[106,4],[107,0],[107,2],[103,1],[103,1],[103,2],[103,2],[103,1],[103,1],[103,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = {type: 'select', distinct: !!$$[$0-7], columns: $$[$0-6], from: $$[$0-5], where:$$[$0-4], group:$$[$0-3], having:$$[$0-2], order:$$[$0-1], setOp: $$[$0]}; 
break;
case 3: case 28:
 this.$ = false; 
break;
case 4: case 22: case 26: case 27:
 this.$ = true; 
break;
case 5: case 7: case 9: case 11: case 13: case 15: case 21: case 47: case 100: case 125:
 this.$ = null; 
break;
case 6: case 8: case 10: case 12: case 14: case 43: case 44: case 45: case 62: case 69: case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 95: case 96: case 97: case 101: case 106: case 108: case 111: case 115: case 118: case 126:
 this.$ = $$[$0]; 
break;
case 16:
 this.$ = {type: $$[$0-2], all: !!$$[$0-1], select: $$[$0]}; 
break;
case 17:
 this.$ = 'union'; 
break;
case 18:
 this.$ = 'intersect'; 
break;
case 19:
 this.$ = 'minus'; 
break;
case 20:
 this.$ = 'except'; 
break;
case 23: case 33: case 38: case 64: case 93: case 98:
 this.$ = $$[$0-2]; $$[$0-2].push($$[$0]); 
break;
case 24: case 32: case 37: case 63: case 94: case 99:
 this.$ = [$$[$0]]; 
break;
case 25:
 this.$ = {expr:$$[$0-2], orderAsc: $$[$0-1], orderByNulls: $$[$0]}; 
break;
case 29:
 this.$ = '';
break;
case 30:
 this.$ = 'NULLS FIRST'; 
break;
case 31:
 this.$ = 'NULLS LAST'; 
break;
case 34:
 this.$ = {type: 'column', value:'*'}; 
break;
case 35:
 this.$ = {type: 'column', value:$$[$0]}; 
break;
case 36:
 this.$ = {type: 'column', value:$$[$0-1], alias:$$[$0]}; 
break;
case 39:
 this.$ = {type:'table', value: $$[$0], join: []}; 
break;
case 40:
 this.$ = $$[$0-3]; $$[$0-3].join.push({type:'table', value: $$[$0], modifier:$$[$0-2]}); 
break;
case 41:
 this.$ = $$[$0-5]; $$[$0-5].join.push({type:'table', value: $$[$0-2], modifier:$$[$0-4], expr:$$[$0]}); 
break;
case 42:
 this.$ = {name: $$[$0-1], alias: $$[$0]}; 
break;
case 46:
 this.$ = $$[$0-1]; 
break;
case 48:
 this.$ = {value: $$[$0] }; 
break;
case 49: case 50:
 this.$ = {value: $$[$0], alias: 1}; 
break;
case 51:
 this.$ = ''; 
break;
case 52:
 this.$ = 'LEFT'; 
break;
case 53:
 this.$ = 'LEFT OUTER'; 
break;
case 54:
 this.$ = 'RIGHT'; 
break;
case 55:
 this.$ = 'RIGHT OUTER'; 
break;
case 56:
 this.$ = 'FULL'; 
break;
case 57:
 this.$ = 'INNER'; 
break;
case 58:
 this.$ = 'CROSS'; 
break;
case 59:
 this.$ = 'NATURAL'; 
break;
case 60:
 this.$ = {type:'and', value: $$[$0]}; 
break;
case 61:
 this.$ = {type:'or', left: $$[$0-2], right: $$[$0]}; 
break;
case 65:
 this.$ = {type: 'condition', value: $$[$0]}; 
break;
case 66:
 this.$ = {type: 'binaryCondition', left: $$[$0-1], right: $$[$0]}; 
break;
case 67:
 this.$ = {type: 'existsCondition', value: $$[$0]}; 
break;
case 68:
 this.$ = {type: 'notCondition', value: $$[$0]}; 
break;
case 81:
 this.$ = {type: 'rhsCompare', op: $$[$0-1], value: $$[$0] }; 
break;
case 82: case 83: case 84:
 this.$ = {type: 'rhsCompareSub', op:$$[$0-2], kind: $$[$0-1], value: $$[$0] }; 
break;
case 85:
 this.$ = {type: 'rhsIs', value: $$[$0]}; 
break;
case 86:
 this.$ = {type: 'rhsIs', value: $$[$0], not:1}; 
break;
case 87:
 this.$ = {type: 'rhsIs', value: $$[$0], distinctFrom:1}; 
break;
case 88:
 this.$ = {type: 'rhsIs', value: $$[$0], not:1, distinctFrom:1}; 
break;
case 89:
 this.$ = { type: 'rhsInSelect', value: $$[$0] }; 
break;
case 90:
 this.$ = { type: 'rhsInSelect', value: $$[$0], not:1 }; 
break;
case 91:
 this.$ = { type: 'rhsInExpressionList', value: $$[$0-1] }; 
break;
case 92:
 this.$ = { type: 'rhsInExpressionList', value: $$[$0-1], not:1 }; 
break;
case 102:
 this.$ = {type: 'rhsLike', value: $$[$0]}; 
break;
case 103:
 this.$ = {type: 'rhsLike', value: $$[$0], not:1}; 
break;
case 104:
 this.$ = {type: 'rhsBetween', left: $$[$0-2], right: $$[$0]}; 
break;
case 105:
 this.$ = {type: 'rhsBetween', left: $$[$0-2], right: $$[$0], not:1}; 
break;
case 107:
 this.$ = {type:'Operand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 109: case 110:
 this.$ = {type:'summand', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 112: case 113: case 114:
 this.$ = {type:'factor', left:$$[$0-2], right:$$[$0], op:$$[$0-1]}; 
break;
case 116: case 117:
 this.$ = {type: 'term', value: $$[$0]}; 
break;
case 119:
 this.$ = {type: 'term', value: $$[$0-1]}; 
break;
case 120: case 121:
 this.$ = {type: 'call', name: $$[$0-3], args: $$[$0-1]}; 
break;
case 122:
 this.$ = {type:'case', clauses: $$[$0-2], else: $$[$0-1]}; 
break;
case 123:
 this.$ = $$[$0-4]; $$[$0-4].push({when: $$[$0-2], then: $$[$0]}); 
break;
case 124:
 this.$ = [{when: $$[$0-2], then: $$[$0]}]; 
break;
case 127:
 this.$ = {type: 'string', value: $$[$0]}; 
break;
case 128: case 130:
 this.$ = {type: 'number', value: $$[$0]}; 
break;
case 129:
 this.$ = {type: 'number', value: -1 * $$[$0]}; 
break;
case 131:
 this.$ = {type: 'param', name: $$[$0].substring(1)}; 
break;
case 132:
 this.$ = {type: 'boolean', value: $$[$0]}; 
break;
case 133:
 this.$ = {type: 'null'}; 
break;
}
},
table: [{3:1,4:2,6:$V0},{1:[3]},{5:[1,4]},o($V1,[2,3],{7:5,15:[1,6]}),{1:[2,1]},{8:7,19:11,41:8,42:$V2,43:$V3,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($V1,[2,4]),o($Vh,[2,5],{9:34,16:[1,36],32:[1,35]}),o($Vi,[2,32]),o($Vi,[2,34]),o($Vi,[2,35]),o($Vi,$Vj,{44:37,51:$Vk,56:$Vl,66:$Vm}),o($Vn,[2,60],{68:$Vo}),o($Vn,[2,62]),o($Vp,[2,63]),{4:42,6:$V0,19:43,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($Vp,[2,65],{70:44,81:46,82:47,83:48,84:49,85:50,73:51,72:[1,54],74:[1,57],75:[1,58],76:[1,59],77:[1,60],78:[1,61],79:[1,62],80:[1,63],88:[1,52],89:[1,53],93:[1,55],94:[1,56],96:$Vq}),{53:64,54:$Vr},{51:$V4,52:$V5,54:$Vs,67:66,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($Vt,[2,106],{98:$Vu,99:$Vv}),o($Vw,[2,108],{42:$Vx,101:$Vy,102:$Vz}),o($VA,[2,111]),o($VA,[2,115]),o($VA,[2,116],{54:[1,73]}),o($VA,[2,117],{54:[1,74]}),o($VA,[2,118]),o($VA,[2,127]),o($VA,[2,128]),{113:[1,75]},{113:[1,76]},o($VA,[2,131]),o($VA,[2,132]),o($VA,[2,133]),{106:77,109:[1,78]},o($VB,[2,7],{10:79,18:[1,80]}),{19:11,41:81,42:$V2,43:$V3,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{17:82,45:83,46:84,50:85,51:$VC,52:$VD,53:88,54:$Vr},o($Vi,[2,36]),{51:$V4,52:$V5,54:$Vs,65:89,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VE,[2,48]),{51:[1,90],57:[1,91]},{51:$V4,52:$V5,54:$Vs,67:92,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{55:[1,93]},{55:[1,94],66:$Vm},o($Vp,[2,66]),{51:$V4,52:$V5,54:$Vs,95:95,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($Vp,[2,76]),o($Vp,[2,77]),o($Vp,[2,78]),o($Vp,[2,79]),o($Vp,[2,80]),{31:[1,97],51:$V4,52:$V5,54:$Vs,69:96,86:[1,98],87:[1,99],95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{15:[1,102],51:$V4,52:$V5,54:$Vs,69:100,72:[1,101],95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{53:103,54:[1,104]},{89:[1,105],93:[1,106],94:[1,107]},{51:$V4,52:$V5,54:$Vs,69:108,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{51:$V4,52:$V5,54:$Vs,69:109,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VF,[2,69]),o($VF,[2,70]),o($VF,[2,71]),o($VF,[2,72]),o($VF,[2,73]),o($VF,[2,74]),o($VF,[2,75]),o($Vp,[2,67]),{4:42,6:$V0},o($Vp,[2,68]),{19:43,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{51:$V4,52:$V5,54:$Vs,97:110,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{51:$V4,52:$V5,54:$Vs,97:111,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{51:$V4,52:$V5,54:$Vs,98:$V9,99:$Va,100:112,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{51:$V4,52:$V5,54:$Vs,98:$V9,99:$Va,100:113,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{51:$V4,52:$V5,54:$Vs,98:$V9,99:$Va,100:114,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{19:118,42:$VG,43:$VH,51:$V4,52:$V5,53:13,54:$V6,55:$VI,65:12,67:14,69:16,71:$V7,72:$V8,90:117,91:116,92:115,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{19:118,42:$VG,43:$VH,51:$V4,52:$V5,53:13,54:$V6,55:$VI,65:12,67:14,69:16,71:$V7,72:$V8,90:117,91:116,92:121,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VA,[2,129]),o($VA,[2,130]),{107:122,108:[2,125],109:[1,123],111:[1,124]},{19:125,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VJ,[2,9],{11:126,20:[1,127]}),{19:128,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($Vi,[2,33]),o($Vh,[2,6],{32:[1,129]}),o($VK,[2,37],{47:130,48:$VL,58:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR}),o($VS,[2,39]),o($VT,$Vj,{44:137,51:$Vk,56:$Vl}),o($VU,[2,43]),o($VU,[2,44]),o($VU,[2,45]),o($Vn,[2,61],{68:$Vo}),o($VE,[2,49]),o($VE,[2,50]),o($Vp,[2,64]),o([5,16,18,20,22,23,27,28,29,30,32,36,37,38,48,49,51,55,56,58,60,61,62,63,64,66,68,108,109,110,111],[2,46]),o($VA,[2,119]),o($Vt,[2,107],{98:$Vu,99:$Vv}),o($Vp,[2,81],{96:$Vq}),{53:138,54:$Vr},{53:139,54:$Vr},{53:140,54:$Vr},o($Vp,[2,85],{96:$Vq}),{15:[1,142],51:$V4,52:$V5,54:$Vs,69:141,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{16:[1,143]},o($Vp,[2,89]),{4:42,6:$V0,19:145,21:144,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{53:146,54:[1,147]},{51:$V4,52:$V5,54:$Vs,69:148,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{51:$V4,52:$V5,54:$Vs,69:149,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($Vp,[2,102],{96:$Vq}),{68:[1,150],96:$Vq},o($Vw,[2,109],{42:$Vx,101:$Vy,102:$Vz}),o($Vw,[2,110],{42:$Vx,101:$Vy,102:$Vz}),o($VA,[2,112]),o($VA,[2,113]),o($VA,[2,114]),{55:[1,151]},{32:[1,152],55:[2,101]},o($VV,[2,99]),o($VV,[2,95],{66:$Vm}),o($VV,[2,96]),o($VV,[2,97]),{55:[1,153]},{108:[1,154]},{19:155,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{19:156,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{66:$Vm,110:[1,157]},o($VW,[2,11],{12:158,22:[1,159]}),{19:145,21:160,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VB,[2,8],{66:$Vm}),{45:161,46:84,50:85,51:$VC,52:$VD,53:88,54:$Vr},{48:[1,162]},{48:[2,52],59:[1,163]},{48:[2,54],59:[1,164]},{48:[2,56]},{48:[2,57]},{48:[2,58]},{48:[2,59]},o($VT,[2,42]),o($Vp,[2,82]),o($Vp,[2,83]),o($Vp,[2,84]),o($Vp,[2,86],{96:$Vq}),{16:[1,165]},{51:$V4,52:$V5,54:$Vs,69:166,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{32:$VX,55:[1,167]},o($VY,[2,94],{66:$Vm}),o($Vp,[2,90]),{4:42,6:$V0,19:145,21:169,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($Vp,[2,103],{96:$Vq}),{68:[1,170],96:$Vq},{51:$V4,52:$V5,54:$Vs,69:171,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VA,[2,120]),{19:118,42:$VG,43:$VH,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,90:172,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VA,[2,121]),o($VA,[2,122]),{66:$Vm,110:[1,173]},{66:$Vm,108:[2,126]},{19:174,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VZ,[2,13],{13:175,23:[1,176]}),{19:177,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VJ,[2,10],{32:$VX}),o($VK,[2,38],{47:130,48:$VL,58:$VM,60:$VN,61:$VO,62:$VP,63:$VQ,64:$VR}),{46:178,50:85,51:$VC,52:$VD,53:88,54:$Vr},{48:[2,53]},{48:[2,55]},{51:$V4,52:$V5,54:$Vs,69:179,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($Vp,[2,87],{96:$Vq}),o($Vp,[2,91]),{19:180,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{32:$VX,55:[1,181]},{51:$V4,52:$V5,54:$Vs,69:182,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($Vp,[2,104],{96:$Vq}),o($VV,[2,98]),{19:183,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($V_,[2,124],{66:$Vm}),o($V$,[2,15],{14:184,25:185,27:[1,186],28:[1,187],29:[1,188],30:[1,189]}),{19:192,24:190,33:191,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($VW,[2,12],{66:$Vm}),o($VS,[2,40],{49:[1,193]}),o($Vp,[2,88],{96:$Vq}),o($VY,[2,93],{66:$Vm}),o($Vp,[2,92]),o($Vp,[2,105],{96:$Vq}),o($V_,[2,123],{66:$Vm}),o($V$,[2,2]),{6:[2,21],26:194,31:[1,195]},o($V01,[2,17]),o($V01,[2,18]),o($V01,[2,19]),o($V01,[2,20]),o($VZ,[2,14],{32:[1,196]}),o($V11,[2,24]),o($V21,[2,26],{34:197,36:[1,198],37:[1,199],66:$Vm}),{19:200,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},{4:201,6:$V0},{6:[2,22]},{19:192,33:202,51:$V4,52:$V5,53:13,54:$V6,65:12,67:14,69:16,71:$V7,72:$V8,95:19,97:20,98:$V9,99:$Va,100:21,103:22,104:25,105:$Vb,112:$Vc,113:$Vd,114:$Ve,115:$Vf,116:$Vg},o($V11,[2,29],{35:203,38:[1,204]}),o($V21,[2,27]),o($V21,[2,28]),o($VS,[2,41],{66:$Vm}),o($V$,[2,16]),o($V11,[2,23]),o($V11,[2,25]),{39:[1,205],40:[1,206]},o($V11,[2,30]),o($V11,[2,31])],
defaultActions: {4:[2,1],133:[2,56],134:[2,57],135:[2,58],136:[2,59],163:[2,53],164:[2,55],195:[2,22]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 52
break;
case 1:return 43
break;
case 2:/* skip whitespace */
break;
case 3:return 6
break;
case 4:return 16
break;
case 5:return 18
break;
case 6:return 15
break;
case 7:return 94
break;
case 8:return 20
break;
case 9:return 22
break;
case 10:return 23
break;
case 11:return 32
break;
case 12:return 98
break;
case 13:return 99
break;
case 14:return 101
break;
case 15:return 42
break;
case 16:return 102
break;
case 17:return 74
break;
case 18:return 75
break;
case 19:return 76
break;
case 20:return 78
break;
case 21:return 77
break;
case 22:return 80
break;
case 23:return 79
break;
case 24:return 54
break;
case 25:return 55
break;
case 26:return 54
break;
case 27:return 55
break;
case 28:return 96
break;
case 29:return 56
break;
case 30:return 31
break;
case 31:return 86
break;
case 32:return 87
break;
case 33:return 71
break;
case 34:return 88
break;
case 35:return 89
break;
case 36:return 49
break;
case 37:return 68
break;
case 38:return 66
break;
case 39:return 72
break;
case 40:return 62
break;
case 41:return 59
break;
case 42:return 48
break;
case 43:return 58
break;
case 44:return 60
break;
case 45:return 61
break;
case 46:return 64
break;
case 47:return 63
break;
case 48:return 105
break;
case 49:return 109
break;
case 50:return 110
break;
case 51:return 111
break;
case 52:return 108
break;
case 53:return 93
break;
case 54:return 36
break;
case 55:return 37
break;
case 56:return 38
break;
case 57:return 39
break;
case 58:return 40
break;
case 59:return 27
break;
case 60:return 28
break;
case 61:return 30
break;
case 62:return 29
break;
case 63:return 113
break;
case 64:return 112
break;
case 65:return 116
break;
case 66:return 115
break;
case 67:return 114
break;
case 68:return 51
break;
case 69:return 57
break;
case 70:return 57
break;
case 71:return 5
break;
case 72:return 'INVALID'
break;
}
},
rules: [/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*\.\*)/i,/^(?:\s+)/i,/^(?:SELECT\b)/i,/^(?:FROM\b)/i,/^(?:WHERE\b)/i,/^(?:DISTINCT\b)/i,/^(?:BETWEEN\b)/i,/^(?:GROUP BY\b)/i,/^(?:HAVING\b)/i,/^(?:ORDER BY\b)/i,/^(?:,)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:%)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:AS\b)/i,/^(?:ALL\b)/i,/^(?:ANY\b)/i,/^(?:SOME\b)/i,/^(?:EXISTS\b)/i,/^(?:IS\b)/i,/^(?:IN\b)/i,/^(?:ON\b)/i,/^(?:AND\b)/i,/^(?:OR\b)/i,/^(?:NOT\b)/i,/^(?:INNER\b)/i,/^(?:OUTER\b)/i,/^(?:JOIN\b)/i,/^(?:LEFT\b)/i,/^(?:RIGHT\b)/i,/^(?:FULL\b)/i,/^(?:NATURAL\b)/i,/^(?:CROSS\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:LIKE\b)/i,/^(?:ASC\b)/i,/^(?:DESC\b)/i,/^(?:NULLS\b)/i,/^(?:FIRST\b)/i,/^(?:LAST\b)/i,/^(?:UNION\b)/i,/^(?:INTERSECT\b)/i,/^(?:EXCEPT\b)/i,/^(?:MINUS\b)/i,/^(?:[0-9]*\.?[0-9]+)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:NULL\b)/i,/^(?:(true|false))/i,/^(?::[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/i,/^(?:["](\\.|[^"])*["])/i,/^(?:[`](\\.|[^`])*[`])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}